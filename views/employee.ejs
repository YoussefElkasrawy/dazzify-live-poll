<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> | Dazzify</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/styles.css">
    <style>
        :root {
            --primary: #4B108D;
            --accent: #3ed6a7;
            --bg: #f8f9fa;
            --card-bg: #fff;
            --shadow: 0 4px 24px rgba(75, 16, 141, 0.07);
            --shadow-sm: 0 2px 8px rgba(75, 16, 141, 0.07);
        }
        body {
            background: var(--bg);
            font-family: 'Poppins', sans-serif;
            margin: 0;
            padding: 0;
            color: #333;
            min-height: 100vh;
            position: relative;
        }
        .header {
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 1.5rem 0;
        }
        .logo {
            font-size: 2rem;
            font-weight: 800;
            color: var(--primary);
            letter-spacing: 1px;
        }
        .container {
            max-width: 800px;
            margin: 0 auto 3rem auto;
            padding: 0 1rem;
            position: relative;
            z-index: 1;
        }
        .shapes-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            overflow: hidden;
        }
        .brand-shape {
            position: absolute;
            filter: blur(30px);
            opacity: 0.15;
            z-index: -1;
        }
        .shape-top-left {
            width: 300px;
            height: 300px;
            top: -120px;
            left: -120px;
            background: var(--primary);
            border-radius: 50%;
            animation: float-tl 20s ease-in-out infinite alternate, pulse 15s ease-in-out infinite;
        }
        .shape-top-right {
            width: 200px;
            height: 200px;
            top: -80px;
            right: -80px;
            background: var(--accent);
            border-radius: 40%;
            animation: float-tr 18s ease-in-out infinite alternate-reverse, pulse 12s ease-in-out infinite;
        }
        .shape-bottom-left {
            width: 250px;
            height: 250px;
            bottom: -100px;
            left: -100px;
            background: var(--accent);
            border-radius: 30% 70% 50% 40%;
            animation: float-bl 25s ease-in-out infinite alternate, morph 15s ease-in-out infinite;
        }
        .shape-bottom-right {
            width: 350px;
            height: 350px;
            bottom: -150px;
            right: -150px;
            background: var(--primary);
            border-radius: 60% 40% 30% 70%;
            animation: float-br 22s ease-in-out infinite alternate-reverse, morph 18s ease-in-out infinite;
        }
        .shape-center {
            width: 180px;
            height: 180px;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(45deg, var(--primary), var(--accent));
            border-radius: 30% 70% 70% 30% / 30% 30% 70% 70%;
            opacity: 0.1;
            animation: morph 15s ease-in-out infinite, float-center 25s ease-in-out infinite;
        }
        @keyframes float-tl {
            0% { transform: translate(0, 0); }
            100% { transform: translate(100px, 80px); }
        }
        @keyframes float-tr {
            0% { transform: translate(0, 0); }
            100% { transform: translate(-80px, 120px); }
        }
        @keyframes float-bl {
            0% { transform: translate(0, 0); }
            100% { transform: translate(120px, -100px); }
        }
        @keyframes float-br {
            0% { transform: translate(0, 0); }
            100% { transform: translate(-100px, -80px); }
        }
        @keyframes float-center {
            0% { transform: translate(-50%, -50%); }
            25% { transform: translate(-40%, -60%); }
            50% { transform: translate(-60%, -40%); }
            75% { transform: translate(-60%, -60%); }
            100% { transform: translate(-50%, -50%); }
        }
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        @keyframes morph {
            0% { border-radius: 30% 70% 70% 30% / 30% 30% 70% 70%; }
            25% { border-radius: 70% 30% 30% 70% / 70% 70% 30% 30%; }
            50% { border-radius: 40% 60% 60% 40% / 60% 40% 60% 40%; }
            75% { border-radius: 60% 40% 40% 60% / 40% 60% 40% 60%; }
            100% { border-radius: 30% 70% 70% 30% / 30% 30% 70% 70%; }
        }
        .page-title {
            text-align: center;
            color: var(--primary);
            font-size: 2.2rem;
            font-weight: 700;
            margin-bottom: 1.5rem;
        }
        .questions-container {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
            margin-bottom: 2rem;
        }
        .question-card {
            background: var(--card-bg);
            border-radius: 1.2rem;
            box-shadow: 0 2px 16px rgba(75, 16, 141, 0.05);
            padding: 1.8rem;
            transition: all 0.3s ease;
            margin-bottom: 1.5rem;
            border: 1px solid rgba(75, 16, 141, 0.03);
        }
        .question-card.locked {
            border-left: 3px solid var(--accent);
        }
        .question-card h2 {
            color: var(--primary);
            font-size: 1.2rem;
            font-weight: 600;
            margin-top: 0;
            margin-bottom: 1.5rem;
            line-height: 1.4;
        }
        .summary-stats {
            display: flex;
            flex-direction: column;
            margin-bottom: 1.2rem;
            background: rgba(75, 16, 141, 0.03);
            padding: 1rem;
            border-radius: 12px;
            opacity: 0;
            height: 0;
            overflow: hidden;
            transition: all 0.5s ease;
        }
        .question-card.show-percent .summary-stats {
            opacity: 1;
            height: auto;
            overflow: visible;
            animation: fadeIn 0.5s ease-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .summary-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
        }
        .summary-title {
            font-size: 0.85rem;
            font-weight: 600;
            color: var(--primary);
        }
        .summary-percent {
            font-size: 1rem;
            font-weight: 700;
            color: var(--primary);
        }
        .summary-percent-bar-container {
            width: 100%;
            height: 12px;
            background: rgba(255, 255, 255, 0.7);
            border-radius: 10px;
            overflow: hidden;
            position: relative;
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
        }
        .summary-legend {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            margin-top: 0.7rem;
            justify-content: flex-start;
        }
        .legend-item {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 0.75rem;
            color: #666;
        }
        .legend-color {
            width: 10px;
            height: 10px;
            border-radius: 50%;
        }
        .summary-percent-bars {
            display: flex;
            height: 100%;
            width: 100%;
            transition: all 1.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        }
        .summary-percent-bar {
            height: 100%;
            transition: width 1.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            transform-origin: left;
            animation: fill-bar 1.5s ease-out forwards;
            position: relative;
            overflow: hidden;
        }
        
        /* Visual indicator for real-time updates */
        .summary-percent-bar.updating::after {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            background: rgba(255, 255, 255, 0.4);
            animation: pulse-update 1s ease-in-out;
            pointer-events: none;
        }
        
        @keyframes pulse-update {
            0% { opacity: 0.8; }
            100% { opacity: 0; }
        }
        .options-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 1.2rem;
        }
        .option-btn {
            background: #fff;
            color: #444;
            border: 1px solid rgba(0, 0, 0, 0.08);
            border-radius: 12px;
            padding: 1.2rem 1.5rem;
            font-size: 1rem;
            font-weight: 400;
            font-family: 'Poppins', sans-serif;
            text-align: left;
            transition: all 0.3s ease;
            display: flex;
            flex-direction: column;
            cursor: pointer;
            position: relative;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.02);
        }
        .option-btn:hover {
            border-color: rgba(75, 16, 141, 0.2);
            transform: translateY(-3px);
            box-shadow: 0 4px 15px rgba(75, 16, 141, 0.06);
            animation: pulse 1s infinite;
        }
        @keyframes pulse {
            0% { box-shadow: 0 4px 15px rgba(75, 16, 141, 0.06); }
            50% { box-shadow: 0 4px 20px rgba(75, 16, 141, 0.15); }
            100% { box-shadow: 0 4px 15px rgba(75, 16, 141, 0.06); }
        }
        .option-btn.answered {
            background: rgba(75, 16, 141, 0.03);
            color: var(--primary);
            border-color: rgba(75, 16, 141, 0.1);
            font-weight: 500;
            animation: selected 0.5s ease;
        }
        @keyframes selected {
            0% { transform: scale(1); }
            50% { transform: scale(1.03); }
            100% { transform: scale(1); }
        }
        .option-btn:disabled {
            cursor: default;
            transform: none;
        }
        .option-text {
            font-weight: 500;
            margin-bottom: 1.2rem;
            line-height: 1.4;
        }
        .percent-display {
            width: 100%;
            position: relative;
        }
        .percent-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.3rem;
            width: 100%;
        }
        .percent-value-wrapper {
            display: block;
            min-width: 45px;
            text-align: right;
        }
        .percent-value {
            font-size: 0.95rem;
            font-weight: 600;
            color: var(--primary);
            display: inline-block;
            position: relative;
        }
        .question-card.show-percent .percent-value {
            opacity: 1;
            font-weight: 700;
            color: var(--primary);
            animation: countUp 1.5s ease-out forwards;
            font-size: 1.1rem;
        }
        .question-card.show-percent .option-btn.answered .percent-value {
            background: -webkit-linear-gradient(var(--accent), var(--primary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-size: 1.2rem;
            font-weight: 800;
        }
        .percent-label {
            font-size: 0.7rem;
            color: #777;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 0.2rem;
            opacity: 0;
            transition: opacity 0.3s ease;
            font-weight: 600;
        }
        .question-card.show-percent .percent-label {
            opacity: 0.9;
        }
        .percent-bar {
            background: #f0f0f0;
            border-radius: 20px;
            height: 8px;
            width: 100%;
            overflow: hidden;
            margin-bottom: 0.5rem;
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05);
            position: relative;
        }
        .percent-bar::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, 
                rgba(255,255,255,0) 0%, 
                rgba(255,255,255,0.4) 50%, 
                rgba(255,255,255,0) 100%);
            opacity: 0;
            z-index: 1;
        }
        .question-card.show-percent .percent-bar::after {
            animation: shine 2s ease-in-out 0.7s;
        }
        @keyframes shine {
            0% { transform: translateX(-100%); opacity: 0; }
            10% { opacity: 1; }
            100% { transform: translateX(100%); opacity: 0; }
        }
        .percent-bar-fill {
            background: linear-gradient(90deg, var(--accent), var(--primary));
            height: 100%;
            border-radius: 20px;
            transition: width 1.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            min-width: 5px;
            box-shadow: 0 0 5px rgba(75, 16, 141, 0.3);
            position: relative;
            transform-origin: left;
        }
        .question-card.show-percent .percent-bar-fill {
            animation: pulse-bar 1.5s infinite alternate 1.5s;
        }
        @keyframes pulse-bar {
            0% { box-shadow: 0 0 5px rgba(75, 16, 141, 0.3); }
            100% { box-shadow: 0 0 8px rgba(75, 16, 141, 0.5); }
        }
        @keyframes fill-bar {
            0% { transform: scaleX(0); }
            100% { transform: scaleX(1); }
        }
        .percent-value::before {
            display: none;
        }
        .question-card.show-percent .option-btn.answered .percent-value {
            background: -webkit-linear-gradient(var(--accent), var(--primary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-size: 1.2rem;
            font-weight: 800;
        }
        .question-card.show-percent .option-btn.answered .percent-bar-fill {
            background: linear-gradient(90deg, var(--accent), var(--primary));
            box-shadow: 0 0 10px rgba(75, 16, 141, 0.4);
        }
        @keyframes pulse-dot {
            0% { transform: scale(1); }
            50% { transform: scale(1.3); }
            100% { transform: scale(1); }
        }
        @keyframes countUp {
            0% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        .navigation {
            text-align: center;
            margin-top: 2rem;
            padding: 1rem 0;
        }
        .continue-btn {
            background: var(--primary);
            color: white;
            border: none;
            border-radius: 2rem;
            padding: 1rem 2.5rem;
            font-size: 1.1rem;
            font-weight: 600;
            font-family: 'Poppins', sans-serif;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: var(--shadow-sm);
        }
        .continue-btn:hover:not(:disabled) {
            background: var(--accent);
            transform: translateY(-2px);
            box-shadow: var(--shadow);
            animation: pulse-btn 1.5s infinite;
        }
        @keyframes pulse-btn {
            0% { box-shadow: 0 4px 15px rgba(75, 16, 141, 0.1); }
            50% { box-shadow: 0 4px 20px rgba(75, 16, 141, 0.2); }
            100% { box-shadow: 0 4px 15px rgba(75, 16, 141, 0.1); }
        }
        .continue-btn:disabled {
            background: #b9b9b9;
            cursor: not-allowed;
        }
        
        /* Download App Section */
        .download-app-section {
            background: var(--card-bg);
            border-radius: 1.5rem;
            box-shadow: var(--shadow);
            margin: 3rem auto;
            padding: 2.5rem;
            position: relative;
            overflow: hidden;
            text-align: center;
        }
        .download-content {
            position: relative;
            z-index: 2;
        }
        .download-content h2 {
            color: var(--primary);
            font-size: 2rem;
            font-weight: 700;
            margin-top: 0;
            margin-bottom: 1rem;
        }
        .download-content p {
            color: #444;
            font-size: 1.1rem;
            font-weight: 500;
            margin-bottom: 2rem;
        }
        .download-badges {
            display: flex;
            justify-content: center;
            gap: 1.5rem;
            flex-wrap: wrap;
        }
        .download-badge {
            display: flex;
            align-items: center;
            justify-content: center;
            transition: transform 0.2s ease;
        }
        .download-badge:hover {
            transform: translateY(-5px);
        }
        .badge-img {
            height: 54px;
            border-radius: 0.5rem;
        }
        .download-bg {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            z-index: 1;
            pointer-events: none;
        }
        .download-shape {
            position: absolute;
            border-radius: 50%;
            background: var(--accent);
            opacity: 0.07;
        }
        .shape-dl-1 {
            bottom: -70px;
            right: -70px;
            width: 240px;
            height: 240px;
        }
        .shape-dl-2 {
            top: -60px;
            left: -60px;
            width: 180px;
            height: 180px;
            background: var(--primary);
            opacity: 0.05;
        }
        
        /* Responsive Adjustments */
        @media (max-width: 700px) {
            .page-title {
                font-size: 1.8rem;
                margin-bottom: 1.2rem;
            }
            .options-grid {
                grid-template-columns: 1fr;
                gap: 0.8rem;
            }
            .question-card {
                padding: 1.3rem 1rem;
                margin-bottom: 1.2rem;
            }
            .question-card h2 {
                font-size: 1.1rem;
                margin-bottom: 1.2rem;
            }
            .option-btn {
                padding: 1rem 1.2rem;
            }
            .option-text {
                margin-bottom: 1rem;
            }
            .percent-value {
                font-size: 0.9rem;
                padding-left: 0;
                display: inline-block;
                position: relative;
            }
            .question-card.show-percent .percent-value {
                font-size: 1rem;
            }
            .question-card.show-percent .option-btn.answered .percent-value {
                font-size: 1.1rem;
            }
            .download-app-section {
                padding: 2rem 1rem;
            }
            .download-content h2 {
                font-size: 1.5rem;
            }
        }
        @media (max-width: 480px) {
            .question-card {
                padding: 1.1rem 0.8rem;
                margin-bottom: 1rem;
                border-radius: 0.8rem;
            }
            .option-btn {
                padding: 0.9rem 1rem;
                border-radius: 8px;
            }
            .option-text {
                font-size: 0.95rem;
                margin-bottom: 0.8rem;
            }
            .percent-bar {
                height: 6px;
                margin-bottom: 0.3rem;
            }
            .percent-value {
                font-size: 0.85rem;
                display: inline-block !important;
                opacity: 1 !important;
                visibility: visible !important;
            }
            .percent-label {
                font-size: 0.65rem;
            }
            .continue-btn {
                padding: 0.8rem 2rem;
                font-size: 1rem;
            }
            .badge-img {
                height: 45px;
            }
        }
    </style>
</head>
<body>
    <div class="shapes-container">
        <div class="brand-shape shape-top-left"></div>
        <div class="brand-shape shape-top-right"></div>
        <div class="brand-shape shape-bottom-left"></div>
        <div class="brand-shape shape-bottom-right"></div>
        <div class="brand-shape shape-center"></div>
    </div>
    
    <header class="header">
        <div class="logo">dazzify</div>
    </header>
    
    <div class="container">
        <h1 class="page-title"><%= title %></h1>
        <div class="questions-container">
            <% questions.forEach((question, index) => { %>
                <div class="question-card" id="question-<%= question.key %>">
                    <h2><%= question.text %></h2>
                    <div class="summary-stats">
                        <div class="summary-header">
                            <div class="summary-title">Response Distribution</div>
                            <div class="summary-percent">100%</div>
                        </div>
                        <div class="summary-percent-bar-container">
                            <div class="summary-percent-bars">
                                <% 
                                let totalPercentage = 0;
                                const percentColors = ['#4B108D', '#7923cb', '#9747ff', '#ba79ff', '#d2a6ff'];
                                %>
                                <% question.options.forEach((option, optIndex) => { 
                                    const percent = percentages[question.key] ? percentages[question.key][optIndex] : 0;
                                    totalPercentage += percent;
                                    const color = percentColors[optIndex % percentColors.length];
                                %>
                                    <div class="summary-percent-bar" 
                                         style="width: 0%; background-color: <%= color %>;" 
                                         data-target-width="<%= percent %>%">
                                    </div>
                                <% }); %>
                            </div>
                        </div>
                        <div class="summary-legend">
                            <% question.options.forEach((option, optIndex) => { 
                                const percent = percentages[question.key] ? percentages[question.key][optIndex] : 0;
                                const color = percentColors[optIndex % percentColors.length];
                            %>
                                <div class="legend-item">
                                    <div class="legend-color" style="background-color: <%= color %>;"></div>
                                    <span><%= option.text.length > 15 ? option.text.substring(0, 15) + '...' : option.text %> (<span class="legend-percent" data-percent="<%= percent %>">0</span>%)</span>
                                </div>
                            <% }); %>
                        </div>
                    </div>
                    <div class="options-grid">
                        <% question.options.forEach((option, optIndex) => { %>
                            <button class="option-btn" 
                                    data-question-key="<%= question.key %>" 
                                    data-option-key="<%= option.key %>"
                                    onclick="vote('<%= question.key %>', '<%= option.key %>')">
                                <span class="option-text"><%= option.text %></span>
                            </button>
                        <% }); %>
                    </div>
                </div>
            <% }); %>
        </div>
        <div class="navigation">
            <button class="continue-btn" onclick="continueToNext()" disabled>Continue</button>
        </div>

        <!-- Download App Section -->
        <section class="download-app-section">
            <div class="download-bg">
                <div class="download-shape shape-dl-1"></div>
                <div class="download-shape shape-dl-2"></div>
            </div>
            <div class="download-content">
                <h2>Get Dazzify on Your Phone</h2>
                <p>Set up your event with only a few clicks!</p>
                <div class="download-badges">
                    <a href="https://play.google.com/store/apps/details?id=com.dazzify.app" target="_blank" class="download-badge">
                        <img src="https://upload.wikimedia.org/wikipedia/commons/7/78/Google_Play_Store_badge_EN.svg" alt="Get it on Google Play" class="badge-img" />
                    </a>
                    <a href="https://apps.apple.com/eg/app/dazzify/id6670177355" target="_blank" class="download-badge">
                        <img src="https://developer.apple.com/assets/elements/badges/download-on-the-app-store.svg" alt="Download on the App Store" class="badge-img" />
                    </a>
                </div>
            </div>
        </section>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Initialize socket connection
        const socket = window.io();
        
        // State management
        const state = {
            answeredQuestions: new Set(),
            totalQuestions: <%= questions.length %>,
            isSubmitting: false
        };

        // Vote handling
        function vote(questionKey, optionKey) {
            if (state.isSubmitting) return;
            try {
                state.isSubmitting = true;
                const questionCard = document.getElementById(`question-${questionKey}`);
                if (!questionCard) throw new Error(`Question card ${questionKey} not found`);
                const buttons = questionCard.querySelectorAll('.option-btn');
                if (!buttons.length) throw new Error(`No buttons found for question ${questionKey}`);
                buttons.forEach(btn => btn.classList.remove('answered'));
                const selectedBtn = Array.from(buttons).find(btn => btn.getAttribute('data-option-key') === optionKey);
                if (selectedBtn) selectedBtn.classList.add('answered');
                
                if (questionCard) {
                    // Reset summary bars
                    const summaryBars = questionCard.querySelectorAll('.summary-percent-bar');
                    summaryBars.forEach(bar => {
                        bar.style.width = '0%';
                    });
                    
                    // Add a slight delay before starting animations
                    setTimeout(() => {
                        // Apply classes to show percentages
                        questionCard.classList.add('show-percent');
                        questionCard.classList.add('locked');
                        buttons.forEach(btn => { btn.disabled = true; });
                        
                        // Animate summary bars
                        summaryBars.forEach(bar => {
                            const targetWidth = bar.getAttribute('data-target-width');
                            bar.style.width = targetWidth;
                        });
                        
                        // Animate percentages in legend
                        const legendPercentages = questionCard.querySelectorAll('.legend-percent');
                        legendPercentages.forEach(percentEl => {
                            const targetValue = parseFloat(percentEl.getAttribute('data-percent'));
                            animateCounter(percentEl, 0, targetValue);
                        });
                    }, 50);
                }
                state.answeredQuestions.add(questionKey);
                // Emit vote to server
                socket.emit('vote', { questionKey, optionKey, isEmployee: true });
                updateContinueButton();
            } catch (error) {
                alert('An error occurred while submitting your vote. Please try again.');
                console.error(error);
            } finally {
                state.isSubmitting = false;
            }
        }

        function animateCounter(element, start, end) {
            let startTime = null;
            const duration = 1500;
            
            function animate(timestamp) {
                if (!startTime) startTime = timestamp;
                const progress = Math.min((timestamp - startTime) / duration, 1);
                
                // Easing function for smoother counting
                const easedProgress = progress < 0.5 
                    ? 4 * progress * progress * progress 
                    : 1 - Math.pow(-2 * progress + 2, 3) / 2;
                    
                const currentValue = Math.floor(easedProgress * (end - start) + start);
                element.textContent = `${currentValue}%`;
                
                if (progress < 1) {
                    requestAnimationFrame(animate);
                } else {
                    element.textContent = `${end}%`;
                    // Add a subtle bounce effect at the end
                    element.animate([
                        { transform: 'scale(1)' },
                        { transform: 'scale(1.15)' },
                        { transform: 'scale(1)' }
                    ], {
                        duration: 300,
                        easing: 'ease-out'
                    });
                }
            }
            
            requestAnimationFrame(animate);
        }

        function updateContinueButton() {
            const continueBtn = document.querySelector('.continue-btn');
            if (continueBtn) {
                continueBtn.disabled = state.answeredQuestions.size !== state.totalQuestions;
            }
        }

        function continueToNext() {
            if (state.answeredQuestions.size !== state.totalQuestions) return;
            window.location.href = '/thankyou';
        }

        document.addEventListener('DOMContentLoaded', () => {
            updateContinueButton();
            
            // Listen for vote updates from other users
            socket.on('voteUpdate', (data) => {
                console.log('Received vote update:', data);
                const { questionKey, percentages } = data;
                updateQuestionPercentages(questionKey, percentages);
            });
        });
        
        // Update percentages in real-time when other users vote
        function updateQuestionPercentages(questionKey, newPercentages) {
            const questionCard = document.getElementById(`question-${questionKey}`);
            if (!questionCard) return;
            
            // Only update if the question has already been answered by this user
            if (!questionCard.classList.contains('show-percent')) return;
            
            console.log(`Updating question ${questionKey} with new percentages:`, newPercentages);
            
            // Update summary bars
            const summaryBars = questionCard.querySelectorAll('.summary-percent-bar');
            summaryBars.forEach((bar, index) => {
                const percent = newPercentages[index] || 0;
                // Update data attribute for future animations
                bar.setAttribute('data-target-width', `${percent}%`);
                
                // Add updating visual indicator
                bar.classList.add('updating');
                setTimeout(() => {
                    bar.classList.remove('updating');
                }, 1000);
                
                // Smoothly animate to new width
                bar.style.width = `${percent}%`;
            });
            
            // Update legend percentages
            const legendPercentages = questionCard.querySelectorAll('.legend-percent');
            legendPercentages.forEach((percentEl, index) => {
                const percent = newPercentages[index] || 0;
                const currentPercent = parseInt(percentEl.textContent);
                
                // Only animate if there's a meaningful change
                if (Math.abs(currentPercent - percent) > 1) {
                    // Update data attribute
                    percentEl.setAttribute('data-percent', percent);
                    // Animate to new value
                    animateCounter(percentEl, currentPercent, percent);
                }
            });
            
            // Update option button percentages if they exist
            const options = questionCard.querySelectorAll('.option-btn');
            options.forEach((option, index) => {
                const percentValue = option.querySelector('.percent-value');
                if (percentValue) {
                    const percent = newPercentages[index] || 0;
                    const currentPercent = parseInt(percentValue.textContent);
                    
                    if (Math.abs(currentPercent - percent) > 1) {
                        animateCounter(percentValue, currentPercent, percent);
                    }
                }
                
                const percentBar = option.querySelector('.percent-bar-fill');
                if (percentBar) {
                    const percent = newPercentages[index] || 0;
                    percentBar.style.width = `${percent}%`;
                }
            });
        }
    </script>
</body>
</html> 